
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.northwind.codegen.table ;

namespace alby.northwind.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void DeleteObjects()
		{
			// TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[1/24] TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ - delete" ) ;
			obj2٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ ) ;
			obj3٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ = factory٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_Factory.Saveˡ( _connection, obj2٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ ) ;
			nu.Assert.IsNull( obj3٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ ) ;
			rowcount3٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ = factory٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_Factory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_, rowcount0٠TestTable7Unicode_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒ___ⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_ ) ;
			 
			// TestTable2b
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[2/24] TestTable2b - delete" ) ;
			obj2٠TestTable2b.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable2b ) ;
			obj3٠TestTable2b = factory٠TestTable2bFactory.Saveˡ( _connection, obj2٠TestTable2b ) ;
			nu.Assert.IsNull( obj3٠TestTable2b ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable2b ) ;
			rowcount3٠TestTable2b = factory٠TestTable2bFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable2b, rowcount0٠TestTable2b ) ;
			 
			// EmployeeTerritories
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[3/24] EmployeeTerritories - delete" ) ;
			obj2٠EmployeeTerritories.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠EmployeeTerritories ) ;
			obj3٠EmployeeTerritories = factory٠EmployeeTerritoriesFactory.Saveˡ( _connection, obj2٠EmployeeTerritories ) ;
			nu.Assert.IsNull( obj3٠EmployeeTerritories ) ;
			base.AssertFlagsAfterDelete( obj2٠EmployeeTerritories ) ;
			rowcount3٠EmployeeTerritories = factory٠EmployeeTerritoriesFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠EmployeeTerritories, rowcount0٠EmployeeTerritories ) ;
			 
			// Territories
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[4/24] Territories - delete" ) ;
			obj2٠Territories.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Territories ) ;
			obj3٠Territories = factory٠TerritoriesFactory.Saveˡ( _connection, obj2٠Territories ) ;
			nu.Assert.IsNull( obj3٠Territories ) ;
			base.AssertFlagsAfterDelete( obj2٠Territories ) ;
			rowcount3٠Territories = factory٠TerritoriesFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Territories, rowcount0٠Territories ) ;
			 
			// Order_Details
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[5/24] Order_Details - delete" ) ;
			obj2٠Order_Details.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Order_Details ) ;
			obj3٠Order_Details = factory٠Order_DetailsFactory.Saveˡ( _connection, obj2٠Order_Details ) ;
			nu.Assert.IsNull( obj3٠Order_Details ) ;
			base.AssertFlagsAfterDelete( obj2٠Order_Details ) ;
			rowcount3٠Order_Details = factory٠Order_DetailsFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Order_Details, rowcount0٠Order_Details ) ;
			 
			// Products
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[6/24] Products - delete" ) ;
			obj2٠Products.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Products ) ;
			obj3٠Products = factory٠ProductsFactory.Saveˡ( _connection, obj2٠Products ) ;
			nu.Assert.IsNull( obj3٠Products ) ;
			base.AssertFlagsAfterDelete( obj2٠Products ) ;
			rowcount3٠Products = factory٠ProductsFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Products, rowcount0٠Products ) ;
			 
			// Orders
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[7/24] Orders - delete" ) ;
			obj2٠Orders.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Orders ) ;
			obj3٠Orders = factory٠OrdersFactory.Saveˡ( _connection, obj2٠Orders ) ;
			nu.Assert.IsNull( obj3٠Orders ) ;
			base.AssertFlagsAfterDelete( obj2٠Orders ) ;
			rowcount3٠Orders = factory٠OrdersFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Orders, rowcount0٠Orders ) ;
			 
			// Employees
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[8/24] Employees - delete" ) ;
			obj2٠Employees.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Employees ) ;
			obj3٠Employees = factory٠EmployeesFactory.Saveˡ( _connection, obj2٠Employees ) ;
			nu.Assert.IsNull( obj3٠Employees ) ;
			base.AssertFlagsAfterDelete( obj2٠Employees ) ;
			rowcount3٠Employees = factory٠EmployeesFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Employees, rowcount0٠Employees ) ;
			 
			// CustomerCustomerDemo
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[9/24] CustomerCustomerDemo - delete" ) ;
			obj2٠CustomerCustomerDemo.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠CustomerCustomerDemo ) ;
			obj3٠CustomerCustomerDemo = factory٠CustomerCustomerDemoFactory.Saveˡ( _connection, obj2٠CustomerCustomerDemo ) ;
			nu.Assert.IsNull( obj3٠CustomerCustomerDemo ) ;
			base.AssertFlagsAfterDelete( obj2٠CustomerCustomerDemo ) ;
			rowcount3٠CustomerCustomerDemo = factory٠CustomerCustomerDemoFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠CustomerCustomerDemo, rowcount0٠CustomerCustomerDemo ) ;
			 
			// フル_ツ
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[10/24] フル_ツ - delete" ) ;
			obj2٠フル_ツ.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠フル_ツ ) ;
			obj3٠フル_ツ = factory٠フル_ツFactory.Saveˡ( _connection, obj2٠フル_ツ ) ;
			nu.Assert.IsNull( obj3٠フル_ツ ) ;
			base.AssertFlagsAfterDelete( obj2٠フル_ツ ) ;
			rowcount3٠フル_ツ = factory٠フル_ツFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠フル_ツ, rowcount0٠フル_ツ ) ;
			 
			// TestTable6a
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[11/24] TestTable6a - delete" ) ;
			obj2٠TestTable6a.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable6a ) ;
			obj3٠TestTable6a = factory٠TestTable6aFactory.Saveˡ( _connection, obj2٠TestTable6a ) ;
			nu.Assert.IsNull( obj3٠TestTable6a ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable6a ) ;
			rowcount3٠TestTable6a = factory٠TestTable6aFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable6a, rowcount0٠TestTable6a ) ;
			 
			// TestTable5
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[12/24] TestTable5 - delete" ) ;
			obj2٠TestTable5.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable5 ) ;
			obj3٠TestTable5 = factory٠TestTable5Factory.Saveˡ( _connection, obj2٠TestTable5 ) ;
			nu.Assert.IsNull( obj3٠TestTable5 ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable5 ) ;
			rowcount3٠TestTable5 = factory٠TestTable5Factory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable5, rowcount0٠TestTable5 ) ;
			 
			// TestTable4
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[13/24] TestTable4 - delete" ) ;
			obj2٠TestTable4.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable4 ) ;
			obj3٠TestTable4 = factory٠TestTable4Factory.Saveˡ( _connection, obj2٠TestTable4 ) ;
			nu.Assert.IsNull( obj3٠TestTable4 ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable4 ) ;
			rowcount3٠TestTable4 = factory٠TestTable4Factory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable4, rowcount0٠TestTable4 ) ;
			 
			// TestTable3
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[14/24] TestTable3 - delete" ) ;
			obj2٠TestTable3.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable3 ) ;
			obj3٠TestTable3 = factory٠TestTable3Factory.Saveˡ( _connection, obj2٠TestTable3 ) ;
			nu.Assert.IsNull( obj3٠TestTable3 ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable3 ) ;
			rowcount3٠TestTable3 = factory٠TestTable3Factory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable3, rowcount0٠TestTable3 ) ;
			 
			// TestTable2a
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[15/24] TestTable2a - delete" ) ;
			obj2٠TestTable2a.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable2a ) ;
			obj3٠TestTable2a = factory٠TestTable2aFactory.Saveˡ( _connection, obj2٠TestTable2a ) ;
			nu.Assert.IsNull( obj3٠TestTable2a ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable2a ) ;
			rowcount3٠TestTable2a = factory٠TestTable2aFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable2a, rowcount0٠TestTable2a ) ;
			 
			// TestTable1
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[16/24] TestTable1 - delete" ) ;
			obj2٠TestTable1.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠TestTable1 ) ;
			obj3٠TestTable1 = factory٠TestTable1Factory.Saveˡ( _connection, obj2٠TestTable1 ) ;
			nu.Assert.IsNull( obj3٠TestTable1 ) ;
			base.AssertFlagsAfterDelete( obj2٠TestTable1 ) ;
			rowcount3٠TestTable1 = factory٠TestTable1Factory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠TestTable1, rowcount0٠TestTable1 ) ;
			 
			// sysdiagrams
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[17/24] sysdiagrams - delete" ) ;
			obj2٠sysdiagrams.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠sysdiagrams ) ;
			obj3٠sysdiagrams = factory٠sysdiagramsFactory.Saveˡ( _connection, obj2٠sysdiagrams ) ;
			nu.Assert.IsNull( obj3٠sysdiagrams ) ;
			base.AssertFlagsAfterDelete( obj2٠sysdiagrams ) ;
			rowcount3٠sysdiagrams = factory٠sysdiagramsFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠sysdiagrams, rowcount0٠sysdiagrams ) ;
			 
			// Suppliers
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[18/24] Suppliers - delete" ) ;
			obj2٠Suppliers.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Suppliers ) ;
			obj3٠Suppliers = factory٠SuppliersFactory.Saveˡ( _connection, obj2٠Suppliers ) ;
			nu.Assert.IsNull( obj3٠Suppliers ) ;
			base.AssertFlagsAfterDelete( obj2٠Suppliers ) ;
			rowcount3٠Suppliers = factory٠SuppliersFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Suppliers, rowcount0٠Suppliers ) ;
			 
			// Shippers
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[19/24] Shippers - delete" ) ;
			obj2٠Shippers.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Shippers ) ;
			obj3٠Shippers = factory٠ShippersFactory.Saveˡ( _connection, obj2٠Shippers ) ;
			nu.Assert.IsNull( obj3٠Shippers ) ;
			base.AssertFlagsAfterDelete( obj2٠Shippers ) ;
			rowcount3٠Shippers = factory٠ShippersFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Shippers, rowcount0٠Shippers ) ;
			 
			// Region
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[20/24] Region - delete" ) ;
			obj2٠Region.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Region ) ;
			obj3٠Region = factory٠RegionFactory.Saveˡ( _connection, obj2٠Region ) ;
			nu.Assert.IsNull( obj3٠Region ) ;
			base.AssertFlagsAfterDelete( obj2٠Region ) ;
			rowcount3٠Region = factory٠RegionFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Region, rowcount0٠Region ) ;
			 
			// DatabaseVersion
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[21/24] DatabaseVersion - delete" ) ;
			obj2٠DatabaseVersion.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠DatabaseVersion ) ;
			obj3٠DatabaseVersion = factory٠DatabaseVersionFactory.Saveˡ( _connection, obj2٠DatabaseVersion ) ;
			nu.Assert.IsNull( obj3٠DatabaseVersion ) ;
			base.AssertFlagsAfterDelete( obj2٠DatabaseVersion ) ;
			rowcount3٠DatabaseVersion = factory٠DatabaseVersionFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠DatabaseVersion, rowcount0٠DatabaseVersion ) ;
			 
			// Customers
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[22/24] Customers - delete" ) ;
			obj2٠Customers.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Customers ) ;
			obj3٠Customers = factory٠CustomersFactory.Saveˡ( _connection, obj2٠Customers ) ;
			nu.Assert.IsNull( obj3٠Customers ) ;
			base.AssertFlagsAfterDelete( obj2٠Customers ) ;
			rowcount3٠Customers = factory٠CustomersFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Customers, rowcount0٠Customers ) ;
			 
			// CustomerDemographics
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[23/24] CustomerDemographics - delete" ) ;
			obj2٠CustomerDemographics.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠CustomerDemographics ) ;
			obj3٠CustomerDemographics = factory٠CustomerDemographicsFactory.Saveˡ( _connection, obj2٠CustomerDemographics ) ;
			nu.Assert.IsNull( obj3٠CustomerDemographics ) ;
			base.AssertFlagsAfterDelete( obj2٠CustomerDemographics ) ;
			rowcount3٠CustomerDemographics = factory٠CustomerDemographicsFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠CustomerDemographics, rowcount0٠CustomerDemographics ) ;
			 
			// Categories
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[24/24] Categories - delete" ) ;
			obj2٠Categories.MarkForDeletionˡ = true ;
			base.AssertFlagsBeforeDelete( obj2٠Categories ) ;
			obj3٠Categories = factory٠CategoriesFactory.Saveˡ( _connection, obj2٠Categories ) ;
			nu.Assert.IsNull( obj3٠Categories ) ;
			base.AssertFlagsAfterDelete( obj2٠Categories ) ;
			rowcount3٠Categories = factory٠CategoriesFactory.GetRowCountˡ( _connection ) ;
			nu.Assert.AreEqual( rowcount3٠Categories, rowcount0٠Categories ) ;
			 
		}
	}

}

