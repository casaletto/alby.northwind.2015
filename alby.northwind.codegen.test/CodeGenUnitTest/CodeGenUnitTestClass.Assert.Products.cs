
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.northwind.codegen.table ;

namespace alby.northwind.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠Products( bool insert, t.Products newobj, t.Products oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[19/24] Products - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.ProductID, "Products.ProductID" ) ;
			nu.Assert.IsNotNull( newobj.ProductName, "Products.ProductName" ) ;
			nu.Assert.IsNotNull( newobj.SupplierID, "Products.SupplierID" ) ;
			nu.Assert.IsNotNull( newobj.CategoryID, "Products.CategoryID" ) ;
			nu.Assert.IsNotNull( newobj.QuantityPerUnit, "Products.QuantityPerUnit" ) ;
			nu.Assert.IsNotNull( newobj.UnitPrice, "Products.UnitPrice" ) ;
			nu.Assert.IsNotNull( newobj.UnitsInStock, "Products.UnitsInStock" ) ;
			nu.Assert.IsNotNull( newobj.UnitsOnOrder, "Products.UnitsOnOrder" ) ;
			nu.Assert.IsNotNull( newobj.ReorderLevel, "Products.ReorderLevel" ) ;
			nu.Assert.IsNotNull( newobj.Discontinued, "Products.Discontinued" ) ;
		 
			base.AssertAreEqual( newobj.ProductName, oldobj.ProductName, "Products.ProductName" ) ;
			base.AssertAreEqual( newobj.SupplierID, oldobj.SupplierID, "Products.SupplierID" ) ;
			base.AssertAreEqual( newobj.CategoryID, oldobj.CategoryID, "Products.CategoryID" ) ;
			base.AssertAreEqual( newobj.QuantityPerUnit, oldobj.QuantityPerUnit, "Products.QuantityPerUnit" ) ;
			base.AssertAreEqual( newobj.UnitPrice, oldobj.UnitPrice, "Products.UnitPrice" ) ;
			base.AssertAreEqual( newobj.UnitsInStock, oldobj.UnitsInStock, "Products.UnitsInStock" ) ;
			base.AssertAreEqual( newobj.UnitsOnOrder, oldobj.UnitsOnOrder, "Products.UnitsOnOrder" ) ;
			base.AssertAreEqual( newobj.ReorderLevel, oldobj.ReorderLevel, "Products.ReorderLevel" ) ;
			base.AssertAreEqual( newobj.Discontinued, oldobj.Discontinued, "Products.Discontinued" ) ;
		 
		}
	}

}

