
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.northwind.codegen.table ;

namespace alby.northwind.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠TestTable4( bool insert, t.TestTable4 newobj, t.TestTable4 oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[12/24] TestTable4 - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.ID, "TestTable4.ID" ) ;
			nu.Assert.IsNotNull( newobj.f_guid, "TestTable4.f_guid" ) ;
			nu.Assert.IsNotNull( newobj.f_bigint, "TestTable4.f_bigint" ) ;
			nu.Assert.IsNotNull( newobj.f_int, "TestTable4.f_int" ) ;
			nu.Assert.IsNotNull( newobj.f_smallint, "TestTable4.f_smallint" ) ;
			nu.Assert.IsNotNull( newobj.f_bit, "TestTable4.f_bit" ) ;
			nu.Assert.IsNotNull( newobj.f_decimal, "TestTable4.f_decimal" ) ;
			nu.Assert.IsNotNull( newobj.f_numeric, "TestTable4.f_numeric" ) ;
			nu.Assert.IsNotNull( newobj.f_money, "TestTable4.f_money" ) ;
			nu.Assert.IsNotNull( newobj.f_smallmoney, "TestTable4.f_smallmoney" ) ;
			nu.Assert.IsNotNull( newobj.f_float, "TestTable4.f_float" ) ;
			nu.Assert.IsNotNull( newobj.f_real, "TestTable4.f_real" ) ;
			nu.Assert.IsNotNull( newobj.f_datetime, "TestTable4.f_datetime" ) ;
			nu.Assert.IsNotNull( newobj.f_smalldatetime, "TestTable4.f_smalldatetime" ) ;
			nu.Assert.IsNotNull( newobj.f_char, "TestTable4.f_char" ) ;
			nu.Assert.IsNotNull( newobj.f_varchar, "TestTable4.f_varchar" ) ;
			nu.Assert.IsNotNull( newobj.f_text, "TestTable4.f_text" ) ;
			nu.Assert.IsNotNull( newobj.f_nchar, "TestTable4.f_nchar" ) ;
			nu.Assert.IsNotNull( newobj.f_nvarchar, "TestTable4.f_nvarchar" ) ;
			nu.Assert.IsNotNull( newobj.f_ntext, "TestTable4.f_ntext" ) ;
			nu.Assert.IsNotNull( newobj.f_binary, "TestTable4.f_binary" ) ;
			nu.Assert.IsNotNull( newobj.f_varbinary, "TestTable4.f_varbinary" ) ;
			nu.Assert.IsNotNull( newobj.f_image, "TestTable4.f_image" ) ;
			nu.Assert.IsNotNull( newobj.f_xml, "TestTable4.f_xml" ) ;
			nu.Assert.IsNotNull( newobj.f_timestamp, "TestTable4.f_timestamp" ) ;
		 
			base.AssertAreEqual( newobj.ID, oldobj.ID, "TestTable4.ID" ) ;
			base.AssertAreEqual( newobj.f_guid, oldobj.f_guid, "TestTable4.f_guid" ) ;
			base.AssertAreEqual( newobj.f_bigint, oldobj.f_bigint, "TestTable4.f_bigint" ) ;
			base.AssertAreEqual( newobj.f_int, oldobj.f_int, "TestTable4.f_int" ) ;
			base.AssertAreEqual( newobj.f_smallint, oldobj.f_smallint, "TestTable4.f_smallint" ) ;
			base.AssertAreEqual( newobj.f_bit, oldobj.f_bit, "TestTable4.f_bit" ) ;
			base.AssertAreEqual( newobj.f_decimal, oldobj.f_decimal, "TestTable4.f_decimal" ) ;
			base.AssertAreEqual( newobj.f_numeric, oldobj.f_numeric, "TestTable4.f_numeric" ) ;
			base.AssertAreEqual( newobj.f_money, oldobj.f_money, "TestTable4.f_money" ) ;
			base.AssertAreEqual( newobj.f_smallmoney, oldobj.f_smallmoney, "TestTable4.f_smallmoney" ) ;
			base.AssertAreEqual( newobj.f_float, oldobj.f_float, "TestTable4.f_float" ) ;
			base.AssertAreEqual( newobj.f_real, oldobj.f_real, "TestTable4.f_real" ) ;
			base.AssertAreEqual( newobj.f_datetime, oldobj.f_datetime, "TestTable4.f_datetime" ) ;
			base.AssertAreEqual( newobj.f_smalldatetime, oldobj.f_smalldatetime, "TestTable4.f_smalldatetime" ) ;
			base.AssertAreEqual( newobj.f_char, oldobj.f_char, "TestTable4.f_char" ) ;
			base.AssertAreEqual( newobj.f_varchar, oldobj.f_varchar, "TestTable4.f_varchar" ) ;
			base.AssertAreEqual( newobj.f_text, oldobj.f_text, "TestTable4.f_text" ) ;
			base.AssertAreEqual( newobj.f_nchar, oldobj.f_nchar, "TestTable4.f_nchar" ) ;
			base.AssertAreEqual( newobj.f_nvarchar, oldobj.f_nvarchar, "TestTable4.f_nvarchar" ) ;
			base.AssertAreEqual( newobj.f_ntext, oldobj.f_ntext, "TestTable4.f_ntext" ) ;
			base.AssertAreEqual( newobj.f_binary, oldobj.f_binary, "TestTable4.f_binary" ) ;
			base.AssertAreEqual( newobj.f_varbinary, oldobj.f_varbinary, "TestTable4.f_varbinary" ) ;
			base.AssertAreEqual( newobj.f_image, oldobj.f_image, "TestTable4.f_image" ) ;
			base.AssertAreEqual( newobj.f_xml, oldobj.f_xml, "TestTable4.f_xml" ) ;
		 
		}
	}

}

