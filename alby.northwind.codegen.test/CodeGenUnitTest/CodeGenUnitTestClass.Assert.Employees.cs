
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.northwind.codegen.table ;

// do not codegen - hello

namespace alby.northwind.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠Employees( bool insert, t.Employees newobj, t.Employees oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[17/24] Employees - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.EmployeeID, "Employees.EmployeeID" ) ;
			nu.Assert.IsNotNull( newobj.LastName, "Employees.LastName" ) ;
			nu.Assert.IsNotNull( newobj.FirstName, "Employees.FirstName" ) ;
			nu.Assert.IsNotNull( newobj.Title, "Employees.Title" ) ;
			nu.Assert.IsNotNull( newobj.TitleOfCourtesy, "Employees.TitleOfCourtesy" ) ;
			nu.Assert.IsNotNull( newobj.BirthDate, "Employees.BirthDate" ) ;
			nu.Assert.IsNotNull( newobj.HireDate, "Employees.HireDate" ) ;
			nu.Assert.IsNotNull( newobj.Address, "Employees.Address" ) ;
			nu.Assert.IsNotNull( newobj.City, "Employees.City" ) ;
			nu.Assert.IsNotNull( newobj.Region, "Employees.Region" ) ;
			nu.Assert.IsNotNull( newobj.PostalCode, "Employees.PostalCode" ) ;
			nu.Assert.IsNotNull( newobj.Country, "Employees.Country" ) ;
			nu.Assert.IsNotNull( newobj.HomePhone, "Employees.HomePhone" ) ;
			nu.Assert.IsNotNull( newobj.Extension, "Employees.Extension" ) ;
			nu.Assert.IsNotNull( newobj.Photo, "Employees.Photo" ) ;
			nu.Assert.IsNotNull( newobj.Notes, "Employees.Notes" ) ;
			//nu.Assert.IsNotNull( newobj.ReportsTo, "Employees.ReportsTo" ) ;
			nu.Assert.IsNotNull( newobj.PhotoPath, "Employees.PhotoPath" ) ;
		 
			base.AssertAreEqual( newobj.LastName, oldobj.LastName, "Employees.LastName" ) ;
			base.AssertAreEqual( newobj.FirstName, oldobj.FirstName, "Employees.FirstName" ) ;
			base.AssertAreEqual( newobj.Title, oldobj.Title, "Employees.Title" ) ;
			base.AssertAreEqual( newobj.TitleOfCourtesy, oldobj.TitleOfCourtesy, "Employees.TitleOfCourtesy" ) ;
			base.AssertAreEqual( newobj.BirthDate, oldobj.BirthDate, "Employees.BirthDate" ) ;
			base.AssertAreEqual( newobj.HireDate, oldobj.HireDate, "Employees.HireDate" ) ;
			base.AssertAreEqual( newobj.Address, oldobj.Address, "Employees.Address" ) ;
			base.AssertAreEqual( newobj.City, oldobj.City, "Employees.City" ) ;
			base.AssertAreEqual( newobj.Region, oldobj.Region, "Employees.Region" ) ;
			base.AssertAreEqual( newobj.PostalCode, oldobj.PostalCode, "Employees.PostalCode" ) ;
			base.AssertAreEqual( newobj.Country, oldobj.Country, "Employees.Country" ) ;
			base.AssertAreEqual( newobj.HomePhone, oldobj.HomePhone, "Employees.HomePhone" ) ;
			base.AssertAreEqual( newobj.Extension, oldobj.Extension, "Employees.Extension" ) ;
			base.AssertAreEqual( newobj.Photo, oldobj.Photo, "Employees.Photo" ) ;
			base.AssertAreEqual( newobj.Notes, oldobj.Notes, "Employees.Notes" ) ;
			base.AssertAreEqual( newobj.ReportsTo, oldobj.ReportsTo, "Employees.ReportsTo" ) ;
			base.AssertAreEqual( newobj.PhotoPath, oldobj.PhotoPath, "Employees.PhotoPath" ) ;
		 
		}
	}

}

