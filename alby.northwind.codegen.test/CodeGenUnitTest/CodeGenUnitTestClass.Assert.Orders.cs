
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.northwind.codegen.table ;

namespace alby.northwind.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠Orders( bool insert, t.Orders newobj, t.Orders oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[18/24] Orders - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.OrderID, "Orders.OrderID" ) ;
			nu.Assert.IsNotNull( newobj.CustomerID, "Orders.CustomerID" ) ;
			nu.Assert.IsNotNull( newobj.EmployeeID, "Orders.EmployeeID" ) ;
			nu.Assert.IsNotNull( newobj.OrderDate, "Orders.OrderDate" ) ;
			nu.Assert.IsNotNull( newobj.RequiredDate, "Orders.RequiredDate" ) ;
			nu.Assert.IsNotNull( newobj.ShippedDate, "Orders.ShippedDate" ) ;
			nu.Assert.IsNotNull( newobj.ShipVia, "Orders.ShipVia" ) ;
			nu.Assert.IsNotNull( newobj.Freight, "Orders.Freight" ) ;
			nu.Assert.IsNotNull( newobj.ShipName, "Orders.ShipName" ) ;
			nu.Assert.IsNotNull( newobj.ShipAddress, "Orders.ShipAddress" ) ;
			nu.Assert.IsNotNull( newobj.ShipCity, "Orders.ShipCity" ) ;
			nu.Assert.IsNotNull( newobj.ShipRegion, "Orders.ShipRegion" ) ;
			nu.Assert.IsNotNull( newobj.ShipPostalCode, "Orders.ShipPostalCode" ) ;
			nu.Assert.IsNotNull( newobj.ShipCountry, "Orders.ShipCountry" ) ;
		 
			base.AssertAreEqual( newobj.CustomerID, oldobj.CustomerID, "Orders.CustomerID" ) ;
			base.AssertAreEqual( newobj.EmployeeID, oldobj.EmployeeID, "Orders.EmployeeID" ) ;
			base.AssertAreEqual( newobj.OrderDate, oldobj.OrderDate, "Orders.OrderDate" ) ;
			base.AssertAreEqual( newobj.RequiredDate, oldobj.RequiredDate, "Orders.RequiredDate" ) ;
			base.AssertAreEqual( newobj.ShippedDate, oldobj.ShippedDate, "Orders.ShippedDate" ) ;
			base.AssertAreEqual( newobj.ShipVia, oldobj.ShipVia, "Orders.ShipVia" ) ;
			base.AssertAreEqual( newobj.Freight, oldobj.Freight, "Orders.Freight" ) ;
			base.AssertAreEqual( newobj.ShipName, oldobj.ShipName, "Orders.ShipName" ) ;
			base.AssertAreEqual( newobj.ShipAddress, oldobj.ShipAddress, "Orders.ShipAddress" ) ;
			base.AssertAreEqual( newobj.ShipCity, oldobj.ShipCity, "Orders.ShipCity" ) ;
			base.AssertAreEqual( newobj.ShipRegion, oldobj.ShipRegion, "Orders.ShipRegion" ) ;
			base.AssertAreEqual( newobj.ShipPostalCode, oldobj.ShipPostalCode, "Orders.ShipPostalCode" ) ;
			base.AssertAreEqual( newobj.ShipCountry, oldobj.ShipCountry, "Orders.ShipCountry" ) ;
		 
		}
	}

}

