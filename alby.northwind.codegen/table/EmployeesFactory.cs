
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.northwind.codegen;

namespace alby.northwind.codegen.table
{
	public partial class EmployeesFactory : acr.FactoryBase< Employees, ns.database.NorthwindDatabaseSingletonHelper, ns.database.NorthwindDatabase >
	{
		static EmployeesFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "Employees" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [LastName], [FirstName], [Title], [TitleOfCourtesy], [BirthDate], [HireDate], [Address], [City], [Region], [PostalCode], [Country], [HomePhone], [Extension], [Photo], [Notes], [ReportsTo], [PhotoPath] ) values ( @LastName, @FirstName, @Title, @TitleOfCourtesy, @BirthDate, @HireDate, @Address, @City, @Region, @PostalCode, @Country, @HomePhone, @Extension, @Photo, @Notes, @ReportsTo, @PhotoPath ) " ;
			_insertIdentityˡ = "insert {0} ( [EmployeeID], [LastName], [FirstName], [Title], [TitleOfCourtesy], [BirthDate], [HireDate], [Address], [City], [Region], [PostalCode], [Country], [HomePhone], [Extension], [Photo], [Notes], [ReportsTo], [PhotoPath] ) values ( @EmployeeID, @LastName, @FirstName, @Title, @TitleOfCourtesy, @BirthDate, @HireDate, @Address, @City, @Region, @PostalCode, @Country, @HomePhone, @Extension, @Photo, @Notes, @ReportsTo, @PhotoPath ) " ;
			_updateˡ = "update {0} set [LastName] = @LastName, [FirstName] = @FirstName, [Title] = @Title, [TitleOfCourtesy] = @TitleOfCourtesy, [BirthDate] = @BirthDate, [HireDate] = @HireDate, [Address] = @Address, [City] = @City, [Region] = @Region, [PostalCode] = @PostalCode, [Country] = @Country, [HomePhone] = @HomePhone, [Extension] = @Extension, [Photo] = @Photo, [Notes] = @Notes, [ReportsTo] = @ReportsTo, [PhotoPath] = @PhotoPath " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [EmployeeID] = @pk_EmployeeID " ;
			_whereSavePKˡ = "where [EmployeeID] = @pk_EmployeeID " ;
		}

		public Employees Saveˡ( sds.SqlConnection connˡ, Employees rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_EmployeeID", rowˡ.PrimaryKeyDictionaryˡ[ Employees.column٠EmployeeID ] );
			base.AddParameterˡ( parametersˡ, "@EmployeeID", rowˡ.EmployeeID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LastName", rowˡ.LastName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@FirstName", rowˡ.FirstName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Title", rowˡ.Title, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@TitleOfCourtesy", rowˡ.TitleOfCourtesy, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@BirthDate", rowˡ.BirthDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@HireDate", rowˡ.HireDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@Address", rowˡ.Address, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@City", rowˡ.City, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Region", rowˡ.Region, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PostalCode", rowˡ.PostalCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Country", rowˡ.Country, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@HomePhone", rowˡ.HomePhone, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Extension", rowˡ.Extension, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Photo", rowˡ.Photo, sd.SqlDbType.Image );
			base.AddParameterˡ( parametersˡ, "@Notes", rowˡ.Notes, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ReportsTo", rowˡ.ReportsTo, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@PhotoPath", rowˡ.PhotoPath, sd.SqlDbType.NText );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.EmployeeID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, identityIDˡ, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<Employees> Saveˡ( sds.SqlConnection connˡ, scg.List<Employees> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<Employees> rowList2ˡ = new scg.List<Employees>();
			foreach( Employees rowˡ in rowListˡ )
			{
				Employees row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public Employees LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			int? EmployeeID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_EmployeeID", EmployeeID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<Employees> LoadByForeignKey٠From٠Employees٠By٠ReportsTo
		(
			sds.SqlConnection connˡ,
			int? ReportsTo,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@ReportsTo", ReportsTo );
			string whereˡ = "where [ReportsTo] = @ReportsTo " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Employees> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Employees> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

