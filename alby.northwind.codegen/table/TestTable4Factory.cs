
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.northwind.codegen;

namespace alby.northwind.codegen.table
{
	public partial class TestTable4Factory : acr.FactoryBase< TestTable4, ns.database.NorthwindDatabaseSingletonHelper, ns.database.NorthwindDatabase >
	{
		static TestTable4Factory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "TestTable4" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [ID], [f_guid], [f_bigint], [f_int], [f_smallint], [f_bit], [f_decimal], [f_numeric], [f_money], [f_smallmoney], [f_float], [f_real], [f_datetime], [f_smalldatetime], [f_char], [f_varchar], [f_text], [f_nchar], [f_nvarchar], [f_ntext], [f_binary], [f_varbinary], [f_image], [f_xml] ) values ( @ID, @f_guid, @f_bigint, @f_int, @f_smallint, @f_bit, @f_decimal, @f_numeric, @f_money, @f_smallmoney, @f_float, @f_real, @f_datetime, @f_smalldatetime, @f_char, @f_varchar, @f_text, @f_nchar, @f_nvarchar, @f_ntext, @f_binary, @f_varbinary, @f_image, @f_xml ) " ;
			_insertIdentityˡ = "insert {0} ( [ID], [f_guid], [f_bigint], [f_int], [f_smallint], [f_bit], [f_decimal], [f_numeric], [f_money], [f_smallmoney], [f_float], [f_real], [f_datetime], [f_smalldatetime], [f_char], [f_varchar], [f_text], [f_nchar], [f_nvarchar], [f_ntext], [f_binary], [f_varbinary], [f_image], [f_xml] ) values ( @ID, @f_guid, @f_bigint, @f_int, @f_smallint, @f_bit, @f_decimal, @f_numeric, @f_money, @f_smallmoney, @f_float, @f_real, @f_datetime, @f_smalldatetime, @f_char, @f_varchar, @f_text, @f_nchar, @f_nvarchar, @f_ntext, @f_binary, @f_varbinary, @f_image, @f_xml ) " ;
			_updateˡ = "update {0} set [ID] = @ID, [f_guid] = @f_guid, [f_bigint] = @f_bigint, [f_int] = @f_int, [f_smallint] = @f_smallint, [f_bit] = @f_bit, [f_decimal] = @f_decimal, [f_numeric] = @f_numeric, [f_money] = @f_money, [f_smallmoney] = @f_smallmoney, [f_float] = @f_float, [f_real] = @f_real, [f_datetime] = @f_datetime, [f_smalldatetime] = @f_smalldatetime, [f_char] = @f_char, [f_varchar] = @f_varchar, [f_text] = @f_text, [f_nchar] = @f_nchar, [f_nvarchar] = @f_nvarchar, [f_ntext] = @f_ntext, [f_binary] = @f_binary, [f_varbinary] = @f_varbinary, [f_image] = @f_image, [f_xml] = @f_xml " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [ID] = @pk_ID " ;
			_whereSavePKˡ = "where [ID] = @pk_ID " ;
		}

		public TestTable4 Saveˡ( sds.SqlConnection connˡ, TestTable4 rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_ID", rowˡ.PrimaryKeyDictionaryˡ[ TestTable4.column٠ID ] );
			base.AddParameterˡ( parametersˡ, "@ID", rowˡ.ID, sd.SqlDbType.UniqueIdentifier );
			base.AddParameterˡ( parametersˡ, "@f_guid", rowˡ.f_guid, sd.SqlDbType.UniqueIdentifier );
			base.AddParameterˡ( parametersˡ, "@f_bigint", rowˡ.f_bigint, sd.SqlDbType.BigInt );
			base.AddParameterˡ( parametersˡ, "@f_int", rowˡ.f_int, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@f_smallint", rowˡ.f_smallint, sd.SqlDbType.SmallInt );
			base.AddParameterˡ( parametersˡ, "@f_bit", rowˡ.f_bit, sd.SqlDbType.Bit );
			base.AddParameterˡ( parametersˡ, "@f_decimal", rowˡ.f_decimal, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@f_numeric", rowˡ.f_numeric, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@f_money", rowˡ.f_money, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@f_smallmoney", rowˡ.f_smallmoney, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@f_float", rowˡ.f_float, sd.SqlDbType.Float );
			base.AddParameterˡ( parametersˡ, "@f_real", rowˡ.f_real, sd.SqlDbType.Real );
			base.AddParameterˡ( parametersˡ, "@f_datetime", rowˡ.f_datetime, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@f_smalldatetime", rowˡ.f_smalldatetime, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@f_char", rowˡ.f_char, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_varchar", rowˡ.f_varchar, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_text", rowˡ.f_text, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_nchar", rowˡ.f_nchar, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_nvarchar", rowˡ.f_nvarchar, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_ntext", rowˡ.f_ntext, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_binary", rowˡ.f_binary, sd.SqlDbType.Image );
			base.AddParameterˡ( parametersˡ, "@f_varbinary", rowˡ.f_varbinary, sd.SqlDbType.Image );
			base.AddParameterˡ( parametersˡ, "@f_image", rowˡ.f_image, sd.SqlDbType.Image );
			base.AddParameterˡ( parametersˡ, "@f_xml", rowˡ.f_xml, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@f_timestamp", rowˡ.f_timestamp, sd.SqlDbType.Image );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.ID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.ID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<TestTable4> Saveˡ( sds.SqlConnection connˡ, scg.List<TestTable4> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<TestTable4> rowList2ˡ = new scg.List<TestTable4>();
			foreach( TestTable4 rowˡ in rowListˡ )
			{
				TestTable4 row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public TestTable4 LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			Guid? ID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_ID", ID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<TestTable4> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<TestTable4> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

