
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.northwind.codegen;

namespace alby.northwind.codegen.table
{
	public partial class SuppliersFactory : acr.FactoryBase< Suppliers, ns.database.NorthwindDatabaseSingletonHelper, ns.database.NorthwindDatabase >
	{
		static SuppliersFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "Suppliers" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [CompanyName], [ContactName], [ContactTitle], [Address], [City], [Region], [PostalCode], [Country], [Phone], [Fax], [HomePage] ) values ( @CompanyName, @ContactName, @ContactTitle, @Address, @City, @Region, @PostalCode, @Country, @Phone, @Fax, @HomePage ) " ;
			_insertIdentityˡ = "insert {0} ( [SupplierID], [CompanyName], [ContactName], [ContactTitle], [Address], [City], [Region], [PostalCode], [Country], [Phone], [Fax], [HomePage] ) values ( @SupplierID, @CompanyName, @ContactName, @ContactTitle, @Address, @City, @Region, @PostalCode, @Country, @Phone, @Fax, @HomePage ) " ;
			_updateˡ = "update {0} set [CompanyName] = @CompanyName, [ContactName] = @ContactName, [ContactTitle] = @ContactTitle, [Address] = @Address, [City] = @City, [Region] = @Region, [PostalCode] = @PostalCode, [Country] = @Country, [Phone] = @Phone, [Fax] = @Fax, [HomePage] = @HomePage " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [SupplierID] = @pk_SupplierID " ;
			_whereSavePKˡ = "where [SupplierID] = @pk_SupplierID " ;
		}

		public Suppliers Saveˡ( sds.SqlConnection connˡ, Suppliers rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_SupplierID", rowˡ.PrimaryKeyDictionaryˡ[ Suppliers.column٠SupplierID ] );
			base.AddParameterˡ( parametersˡ, "@SupplierID", rowˡ.SupplierID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@CompanyName", rowˡ.CompanyName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ContactName", rowˡ.ContactName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ContactTitle", rowˡ.ContactTitle, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Address", rowˡ.Address, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@City", rowˡ.City, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Region", rowˡ.Region, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PostalCode", rowˡ.PostalCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Country", rowˡ.Country, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Phone", rowˡ.Phone, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Fax", rowˡ.Fax, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@HomePage", rowˡ.HomePage, sd.SqlDbType.NText );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.SupplierID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, identityIDˡ, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<Suppliers> Saveˡ( sds.SqlConnection connˡ, scg.List<Suppliers> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<Suppliers> rowList2ˡ = new scg.List<Suppliers>();
			foreach( Suppliers rowˡ in rowListˡ )
			{
				Suppliers row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public Suppliers LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			int? SupplierID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_SupplierID", SupplierID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<Suppliers> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Suppliers> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

