
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.northwind.codegen;

namespace alby.northwind.codegen.table
{
	public partial class OrdersFactory : acr.FactoryBase< Orders, ns.database.NorthwindDatabaseSingletonHelper, ns.database.NorthwindDatabase >
	{
		static OrdersFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "Orders" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [CustomerID], [EmployeeID], [OrderDate], [RequiredDate], [ShippedDate], [ShipVia], [Freight], [ShipName], [ShipAddress], [ShipCity], [ShipRegion], [ShipPostalCode], [ShipCountry] ) values ( @CustomerID, @EmployeeID, @OrderDate, @RequiredDate, @ShippedDate, @ShipVia, @Freight, @ShipName, @ShipAddress, @ShipCity, @ShipRegion, @ShipPostalCode, @ShipCountry ) " ;
			_insertIdentityˡ = "insert {0} ( [OrderID], [CustomerID], [EmployeeID], [OrderDate], [RequiredDate], [ShippedDate], [ShipVia], [Freight], [ShipName], [ShipAddress], [ShipCity], [ShipRegion], [ShipPostalCode], [ShipCountry] ) values ( @OrderID, @CustomerID, @EmployeeID, @OrderDate, @RequiredDate, @ShippedDate, @ShipVia, @Freight, @ShipName, @ShipAddress, @ShipCity, @ShipRegion, @ShipPostalCode, @ShipCountry ) " ;
			_updateˡ = "update {0} set [CustomerID] = @CustomerID, [EmployeeID] = @EmployeeID, [OrderDate] = @OrderDate, [RequiredDate] = @RequiredDate, [ShippedDate] = @ShippedDate, [ShipVia] = @ShipVia, [Freight] = @Freight, [ShipName] = @ShipName, [ShipAddress] = @ShipAddress, [ShipCity] = @ShipCity, [ShipRegion] = @ShipRegion, [ShipPostalCode] = @ShipPostalCode, [ShipCountry] = @ShipCountry " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [OrderID] = @pk_OrderID " ;
			_whereSavePKˡ = "where [OrderID] = @pk_OrderID " ;
		}

		public Orders Saveˡ( sds.SqlConnection connˡ, Orders rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_OrderID", rowˡ.PrimaryKeyDictionaryˡ[ Orders.column٠OrderID ] );
			base.AddParameterˡ( parametersˡ, "@OrderID", rowˡ.OrderID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@CustomerID", rowˡ.CustomerID, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@EmployeeID", rowˡ.EmployeeID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@OrderDate", rowˡ.OrderDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@RequiredDate", rowˡ.RequiredDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@ShippedDate", rowˡ.ShippedDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@ShipVia", rowˡ.ShipVia, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@Freight", rowˡ.Freight, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@ShipName", rowˡ.ShipName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShipAddress", rowˡ.ShipAddress, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShipCity", rowˡ.ShipCity, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShipRegion", rowˡ.ShipRegion, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShipPostalCode", rowˡ.ShipPostalCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShipCountry", rowˡ.ShipCountry, sd.SqlDbType.NText );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, true, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.OrderID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, identityIDˡ, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<Orders> Saveˡ( sds.SqlConnection connˡ, scg.List<Orders> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<Orders> rowList2ˡ = new scg.List<Orders>();
			foreach( Orders rowˡ in rowListˡ )
			{
				Orders row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public Orders LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			int? OrderID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_OrderID", OrderID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<Orders> LoadByForeignKey٠From٠Customers٠By٠CustomerID
		(
			sds.SqlConnection connˡ,
			string CustomerID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@CustomerID", CustomerID );
			string whereˡ = "where [CustomerID] = @CustomerID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Orders> LoadByForeignKey٠From٠Employees٠By٠EmployeeID
		(
			sds.SqlConnection connˡ,
			int? EmployeeID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@EmployeeID", EmployeeID );
			string whereˡ = "where [EmployeeID] = @EmployeeID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Orders> LoadByForeignKey٠From٠Shippers٠By٠ShipVia
		(
			sds.SqlConnection connˡ,
			int? ShipVia,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@ShipVia", ShipVia );
			string whereˡ = "where [ShipVia] = @ShipVia " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Orders> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Orders> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

